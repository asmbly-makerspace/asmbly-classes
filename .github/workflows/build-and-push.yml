name: Build, Push, and Deploy Docker Image

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-2
  ECR_REPO: classes-page

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        
      - name: Build and Push
        env:
          REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_TAG: ${{ github.sha }}
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./app
          platforms: linux/amd64
          push: true
          secret-envs: |
            postgres-user=${{ secrets.POSTGRES_USER }}
            postgres-pass=${{ secrets.POSTGRES_PASS }}
            postgres-db=${{ secrets.POSTGRES_DB }}
            postgres-port=${{ secrets.POSTGRES_PORT }}
          tags: |
            $REGISTRY/$ECR_REPO:latest
            $REGISTRY/$ECR_REPO:$IMAGE_TAG

  copy-latest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy latest files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "./compose.yaml,./cron-service,./caddy"
          target: "~/app"
          overwrite: true
       
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy latest image
        uses: appleboy/ssh-action@master
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPO: ${{ env.ECR_REPO }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: AWS_REGION,AWS_ACCOUNT_ID,ECR_REPO
          script: |
            export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
            export ECR_REPO=$ECR_REPO
            export AWS_REGION=$AWS_REGION
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            cd ~/app
            TAG=latest docker compose pull
            TAG=latest docker compose up -d
            
        
